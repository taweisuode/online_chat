var app = require('express')();
var http = require('http').Server(app);
var io = require('socket.io')(http);

app.get('/',function(req,res){
    res.send('<h1>Welcome Realtime Server</h1>');
});

    var userArr = new Array();
    var userCount = 0;
io.on('connection',function(socket)
{
    console.log('a user connected');
    socket.on('login',function(obj)
    {
        //判断是否是新用户登录  indexOf是js 判断数组是否包含一个元素的函数 大于0表示包含 －1表示不包含 
        if(userArr.indexOf(obj) == '-1')
        {
            userArr.push(obj);
            userCount ++;
        }
        var login_message = 
        {
            user_array : userArr,
            user_count : userCount,
            user_now   : obj
        }
        console.log(login_message);
        //将所有用户登录的信息发给所有用户
        io.sockets.emit('login_message',login_message);
    });
    socket.on('message',function(msg)
    {
        console.log('接收到',msg);
        io.sockets.emit('message',msg);
    });
    socket.on('logout',function(obj)
    {
        console.log(obj+'已退出');
        //判断是否是新用户登录  indexOf是js 判断数组是否包含一个元素的函数 大于0表示包含 －1表示不包含 
        if(userArr.indexOf(obj) >= '0')
        {
            for(var i= 0;i<userArr.length;i++)
            {
                if(userArr[i] == obj)
                {
                    //1. splice(1,1)   -删除第二个元素。 
                    //
                    //第一个 1 是位置， 位置从0 开始；
                    //
                    //第二个1 是个数， 删除一个元素。
                    userArr.splice(i,1);
                }

            }
            userCount --;
        }
        var logout_message = 
        {
            user_array : userArr,
            user_count : userCount,
            user_now   : obj
        }
        console.log("logout");
        console.log(logout_message);
        socket.broadcast.emit('logout_message',logout_message);
    });
});
http.listen(3000,function(){
    console.log('listening on *:3000'); 
});
